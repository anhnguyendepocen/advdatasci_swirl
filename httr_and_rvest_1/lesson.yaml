- Class: meta
  Course: advdatasci_swirl
  Lesson: httr_and_rvest_1
  Author: John Muschelli
  Type: Standard
  Organization: JHU Biostatistics and DSL
  Version: 2.4.2.3

- Class: text
  Output: Welcome to working with httr and rvest!  
    We will be discussing how to use the httr package to interface with webpages
    and scrape some data.  

- Class: cmd_question
  Output: Let's load in the httr package (it's already loaded) but keep 
    in the habit of loading in packages using the library command.
  CorrectAnswer: library(httr)
  AnswerTests: omnitest(correctExpr='library(httr)')
  Hint: Type library(httr)

- Class: cmd_question
  Output: Now that we have the question loaded, let's look at the help of 
    some of "VERBS".  In this example, let's see the help of GET
  CorrectAnswer: ?GET
  AnswerTests: omnitest(correctExpr='?GET')
  Hint: Type ?GET

- Class: mult_question
  Output: The GET function retrieves information from a website.  
    What seems like a VERB that adds/uploads information on a website
  AnswerChoices: POST;DELETE;HEAD;PATCH
  CorrectAnswer: POST
  AnswerTests: omnitest(correctVal='POST')
  Hint: ""

- Class: cmd_question
  Output: I picked a random Wikipedia article from their random article generator,
    which has the url "https://en.wikipedia.org/wiki/Hugh_Clapperton".  
    Let's use GET to get the information from this page.  Store the outcome in
    the R object get_ret, and store it using the "<-" operator.
  CorrectAnswer: get_ret <- GET("https://en.wikipedia.org/wiki/Hugh_Clapperton")
  AnswerTests: omnitest(correctExpr='get_ret <- GET("https://en.wikipedia.org/wiki/Hugh_Clapperton")')
  Hint: The syntax should be get_ret <- GET(url)

- Class: video
  Output: Let's check out the Wiki page to see what it looks like.
  VideoLink: https://en.wikipedia.org/wiki/Hugh_Clapperton
  
- Class: cmd_question
  Output: Now that we have the result of the GET command, let's see the contents of it. 
    Print the names of get_ret
  CorrectAnswer: names(get_ret)
  AnswerTests: omnitest(correctExpr='names(get_ret)')
  Hint: names(get_ret)

- Class: cmd_question
  Output: Let's look at the url element from get_ret
  CorrectAnswer: get_ret$url
  AnswerTests: omnitest(correctExpr='get_ret$url')
  Hint: use the $ operator to extract the url

- Class: cmd_question
  Output: Let's try to look at the content using the $ operator to extract the content
    of the webpage.  Use head around this to only show the first 6 elements
  CorrectAnswer: head(get_ret$content)
  AnswerTests: omnitest(correctExpr='head(get_ret$content)')
  Hint: head(get_ret$content)

- Class: text
  Output: That's weird!  The reason is that httr::GET can download data as raw or 
    binary or encode it using a encoding scheme.  We will look at the content
    function to fix this.

- Class: cmd_question
  Output: Let's get the content from the get_ret object, using the content() function,
    not the $ operator.
  CorrectAnswer: content(get_ret)
  AnswerTests: omnitest(correctExpr='content(get_ret)')
  Hint: content(get_ret)

- Class: text
  Output: We see the output says it is an xml document.  
    XML is a markup language that allows for structured data.  Actually, 
    the data is in HTML, but the xml2 package also reads in HTML and has a
    standardized way of storing it.

- Class: text
  Output: Let's extract some information from this document.  
    Let's extract from the Early Career section of the document.
    For this we're going to use selector gadget.

- Class: video
  Output: Here is the rvest use of selector gadget to identify areas
  VideoLink: https://cran.r-project.org/web/packages/rvest/vignettes/selectorgadget.html

- Class: cmd_question
  Output: Let's first assign the content to the object hugh.
  CorrectAnswer: hugh <- content(get_ret)
  AnswerTests: omnitest(correctExpr='hugh <- content(get_ret)')
  Hint: hugh <- content(get_ret)

- Class: cmd_question
  Output: Now we're going to use the rvest package, so let's library that as well
  CorrectAnswer: library(rvest)
  AnswerTests: omnitest(correctExpr='library(rvest)')
  Hint: library(rvest)

- Class: cmd_question
  Output: Let's assign an R object called early from the object hugh.  We'll use
    the html_nodes function and the "p:nth-child(8), p:nth-child(7)", 
    which is the css I obtained from selector gadget.  
  CorrectAnswer: early <- html_nodes(hugh, "p:nth-child(8), p:nth-child(7)")
  AnswerTests: omnitest(correctExpr='early <- html_nodes(hugh, "p:nth-child(8), p:nth-child(7)")')
  Hint: early <- html_nodes(hugh, "p:nth-child(8), p:nth-child(7)")

- Class: cmd_question
  Output: Now that we have early, we can print it out to see the result.  
    Just print early to view it
  CorrectAnswer: early
  AnswerTests: omnitest(correctExpr='early')
  Hint: early

- Class: cmd_question
  Output: We see that it's an xml_nodeset, which means it's a subset of the document.
    We want the text from these nodes, so we will use the xml_text function.
    Assign the output to early_para.
  CorrectAnswer: early_para <- xml_text(early)
  AnswerTests: omnitest(correctExpr='early_para <- xml_text(early)')
  Hint: early_para <- xml_text(early)

- Class: text
  Output: Now we see we have the first 2 paragraphs from this Wikipedia page.
